#! /bin/sh
# the next line restarts using wish \
exec @WISH@ "$0" "$@"

# load icm interface functions
load @QPHOME@/bin/tkICM.so tkICM

#
# A "dumb terminal" interface to the QP interpreter
#

# Get the runtime arguments
set thread_name [lindex $argv 0]
set process_id [lindex $argv 1]
set icm_addr [lindex $argv 2]
set icm_port [lindex $argv 3]

set gui_name ${thread_name}_${process_id}_gui
wm title . "${thread_name}  ${process_id}  GUI"
wm iconname . $gui_name
wm geometry . +30+30
wm protocol . WM_DELETE_WINDOW {
     if {[tk_dialog .dialog "" "Use Control-D to exit - if you select OK then the GUI will terminate but may leave some qem's running - the program kq will kill all running qem's" error 0 Cancel OK] == 1} {
           exit
         }
     }


proc show_exit_msg {} {
  if ![winfo exists .exit_msg] {
     toplevel .exit_msg
     message .exit_msg.msg -text "Use Control-D to exit"
     }
}


# Initialises the ICM-Comms
icmInitComms $icm_port $icm_addr

# Register the ICM-agent giving it the runtime arg as the handle
# and returning the file handle for incoming messages
set icm_channel [icmRegisterAgent $gui_name]

# Set up the ICM file event
fconfigure $icm_channel -blocking 0 -buffering line
fileevent  $icm_channel readable {eval [icm_msg_read]}

# Build the QP thread handle
set parent_handle ":${process_id}"

###################################################################
# The following function reads ICM messages from the ICM channel
# and calls a user defined function process_icm_message that takes
# the message and the sender and reply-to addresses.
# The special message $exit_gui causes the GUi to exit.


# The function called for ICM channel read events.
proc icm_msg_read {} {
    while {[icmMsgAvail] == "yes"} {
      icm_msg_read_one
    }
}

proc icm_msg_read_one {} {
    set icm_msg [icmGetMsg]
    if { [lindex $icm_msg 0] == "\$exit_gui"} {
        exit 0
    } else {
        process_icm_message [lindex $icm_msg 0] [lindex $icm_msg 1] [lindex $icm_msg 2]
    }
}

############# end of ICM message processing ####################

set query_ready 1
set history_position 0
set history_top 0
set qw 1
set is_help 0


############################################################
# Management of the menu and saving histories and loading queries.

menu .menu -tearoff 0
set m .menu.file
menu $m -tearoff 0
.menu add cascade -label "File" -menu $m
$m add command -label "Open Query File" -command { open_qfile }
$m add command -label "Save History" -command { save_history }
$m add command -label "Save Session" -command { save_session }
$m add command -label "Help" -command { help_me }
. configure -menu .menu

proc open_qfile {} {
    global qw
    set file [fileDialog "open"]
    if {$file == ""} {
      return
    }
    toplevel .$qw
    wm title .$qw $file
    wm iconname .$qw $file
    scrollbar .$qw.s -relief flat -command ".$qw.text yview"
    pack .$qw.s -side right -fill y
    text .$qw.text -relief raised -bd 2 -yscrollcommand ".$qw.s set" -setgrid true -width 40 -height 20
    pack .$qw.text -side left -fill both -expand 1
    .$qw.text configure -font {Courier-Adobe 12}
    set fileID [open $file r]
    while {[gets $fileID line] >= 0} {
        .$qw.text insert end "$line\n"
    }

    .$qw.text mark set insert 1.0
    focus .$qw.text

    bind .$qw <F5> {
        set line [%W get "insert linestart" "insert lineend"]
        .appio insert end $line
        process_return
        %W mark set insert "insert lineend +1 char"
    }
    bind .$qw <F6> {
	.appio insert end "\n"
	process_return
    }
    bind .$qw <F7> {
        .appio insert end ";\n"
        process_return
    }
    bind .$qw <F8> {
        .appio insert end ",\n"
        process_return
    }
    bind .$qw <F9> {
        set line [%W get "insert linestart" "insert lineend"]
        .appio insert insert $line
    }

    set qw [expr $qw +1]
    close $fileID

}

proc save_history {} {
    global history
    global history_top
    set file [fileDialog "save"]
    if {$file == ""} {
      return
    }
    set fileID [open $file w]
    for {set i 1} {$i <= $history_top} { incr i 1} {
	puts $fileID $history($i)
    }
    close $fileID
}

proc save_session {} {
    set file [fileDialog "save"]
    if {$file == ""} {
      return
    }
    set fileID [open $file w]
    puts $fileID [.appio get 1.0 end]
    close $fileID
}

proc help_me {} {
    global is_help
    if {$is_help} {
        return
    }
    set is_help 1
    toplevel .help
    wm title .help Help
    wm iconname .help Help
    scrollbar .help.s -relief flat -command ".help.text yview"
    pack .help.s -side right -fill y
    text .help.text -relief raised -bd 2 -yscrollcommand ".help.s set" -setgrid true -width 60 -height 30 -wrap word
    pack .help.text -side left -fill both -expand 1
    .help.text configure -font {Courier-Adobe 12}
    .help.text insert end "Using the Qu-Prolog interpreter GUI\n\n"
    .help.text insert end "The GUI behaves much like the dumb terminal interface to qp. Output (stdout and stderr) appears in the GUI text window and input added to the text window is taken as input to qp. In addition Control-D and Control-C have the same behaviour in the GUI as in the dumb terminal interface.\n\n"
    .help.text insert end "A special exception for output is when qp outputs an atom of the form '\$tk\$script' or '\$tkr\$script'. In both cases the GUI traps this output and evaluates the script. In the second case the result of evaluation is returned to qp.\n\n"
    .help.text insert end "The GUI also includes features not found in the dumb terminal interface and these are listed below.\n\n"
    .help.text insert end "1. Query Editing\n\n"
    .help.text insert end "Because the GUI uses a text window for interaction the usual text window editing can be used to edit input. When editing is complete a RETURN will send the entire input to qp.\n\n"
    .help.text insert end "2. Query History \n\n"
    .help.text insert end "Each query given to qp is added to the query history list. The up and down arrow keys can be used to move through the history list.\n\n"
    .help.text insert end "3. Saving the History\n\n"
    .help.text insert end "The File menu contains an item for saving the session history to a file.\n\n"
    .help.text insert end "4. Saving the Session\n\n"
    .help.text insert end "The entire contents of the text window can also be saved using the File menu.\n\n"
    .help.text insert end "5. Opening a Query File\n\n"
    .help.text insert end "The File menu also contains an option for opening a file. Typically this file contains a collection of queries - possibly produced by saving the history of another session. When this file is opened the contents of the file appear in a separate edit window. Within this window the following keys can be used to send strings to the interpreter window.\n\n"
    .help.text insert end "<F5> - Send the current line (including the newline) to the interpreter window and advance the cursor to the beginning of the next line. If qp is waiting for a query then the F5 key has the effect of sending the current query to qp.\n\n"
    .help.text insert end "<F6> - Send a newline to the interpreter window. This,and the next two keys, are typically used when qp is expecting a user response to the answer of the previous query.\n\n"
    .help.text insert end "<F7> - Send a semi-colon to the interpreter window.\n\n"
    .help.text insert end "<F8> - Send a comma to the interpreter window.\n\n"
    .help.text insert end "<F9> - Similar to <F5> except that the newline is not sent. This might be used to build up a query in the interpreter window.\n\n"
}

proc fileDialog {op} {
    set types {
	{"All files"      *}
    }
    if {$op == "open"} {
      return [tk_getOpenFile -filetypes $types -parent .]
    } else {
      return [tk_getSaveFile -filetypes $types -parent .]
    }
}

# End of menu management
############################################################

scrollbar .s -relief flat -command ".appio yview"
pack .s -side right -fill y
text .appio -relief raised -bd 2 -yscrollcommand ".s set" -setgrid true -width 80 -height 40
pack .appio -side left -fill both -expand 1
.appio configure -font {Courier-Adobe 12}
.appio configure -foreground blue
.appio tag configure color1 -foreground black


.appio mark set insert end
.appio mark set startInput {insert}
.appio mark gravity startInput left


icmFmtSendMsg "${thread_name}${parent_handle}" "ready_to_go"

bind .appio <ButtonRelease-1> {
	if {[.appio compare startInput > current]} {
		.appio mark set insert end
                break
	}
}
bind .appio <Button-2> {
	if {[.appio compare startInput > current]} {
		.appio mark set insert end
                break
	}
}


bind .appio <ButtonRelease-2> {
	if {[.appio compare startInput > current]} {
		.appio mark set current insert 
                break
	}
}

bind .appio <Return> {
    process_return
    break
}

bind .appio <Key-Down> {
	if {!$query_ready} break
	if {$history_top == 0} break
        if {$history_position > $history_top} break
        if {$history_position < $history_top} {
            set history_position [expr $history_position + 1]
	    .appio delete startInput end
	    .appio mark set insert end
            .appio insert end $history($history_position)
	    .appio mark set insert end
	    .appio see end
        } else {
            set history_position [expr $history_position + 1]
	    .appio delete startInput end
	    .appio mark set insert end
	    .appio see end
        }
	break
}
bind .appio <Key-Up> {
	if {!$query_ready} break
	if {$history_top == 0} break
	if {$history_position == 0} break
        if {$history_position > 1} {
	    .appio delete startInput end
	    .appio mark set insert end
            set history_position [expr $history_position - 1]
            .appio insert end $history($history_position)
	    .appio mark set insert end
	    .appio see end
        } else {
	    .appio delete startInput end
	    .appio mark set insert end
            .appio insert end $history($history_position)
	    .appio mark set insert end
	    .appio see end
        }
	break
}
bind .appio <BackSpace> {
	if {[.appio compare insert <= startInput]} {
            break
        }
}
bind .appio <Control-h> {
	if {[.appio compare insert <= startInput]} {
            break
        }
}
bind .appio <Delete> {
	if {[.appio compare insert <= startInput]} {
            break
        }
}
bind .appio <Control-d>  {
        .appio insert end "\n"
        .appio mark set insert end
        .appio mark set startInput {insert}
	set query_ready 0
        icmFmtSendMsg $parent_handle ""
	}

bind .appio <Control-c>  {
	set query_ready 0
        icmFmtSendMsg $parent_handle "control_C_message"
        break
	}

 
bind .appio <Destroy> {
        icmDeregisterAgent       
	}

focus .appio


proc process_return {} {
    global query_ready
    global history_top
    global history_position
    global history
    global parent_handle
    if {$query_ready} {
      set cmd [.appio get startInput end] 
      if {[complete_goal $cmd]} {
        set history_top [expr $history_top + 1]
        set cmd [string trimleft $cmd]
        set history($history_top) [string trimright $cmd]
        set history_position [expr $history_top + 1]
        .appio insert end "\n"
        .appio mark set insert end
        .appio mark set startInput {insert}
        icmFmtSendMsg $parent_handle $cmd
        set query_ready 0
        .appio see end
       } else {
        .appio insert end "\n"
        .appio see end
       }
    } else {
      set cmd [.appio get startInput end] 
      .appio insert end "\n"
      .appio mark set insert end
      .appio mark set startInput {insert}
      icmFmtSendMsg $parent_handle $cmd
      .appio see end
    }
}

# User defined ICM message function
proc process_icm_message {msg addr reply} {
        global query_ready
        global esc_cmd
        global parent_handle
        global thread_name
        global process_id
        global gui_name

# If the thread name changes then reset thread-name-specific info.
        regexp {([^:]*)} $addr tid 
        if {$tid != $thread_name} {
          set thread_name $tid
          set gui_name ${thread_name}_${process_id}_gui
          wm title . "${thread_name}  ${process_id}  GUI"
          wm iconname . $gui_name
        }


        if {[regexp {^\$tk\$(.*)$} $msg d1 d2]} {
	  set esc_cmd $d2
          uplevel #0 {
            eval $esc_cmd
           }
        } else { if {[regexp {^\$tkr\$(.*)$} $msg d1 d2]} {
          set esc_cmd $d2
          uplevel #0 {
            set result [eval $esc_cmd]
            icmFmtSendMsg $parent_handle "${result}. "
           }
        } else {
	   if {[regexp {\?- $} $msg dummy1 dummy2]} {
		set query_ready 1
	   }
	  .appio insert end $msg color1
	  .appio mark set insert end 
	  .appio mark set startInput {insert}
	  .appio mark gravity startInput left
	  .appio yview -pickplace end
        }
        }
}


# Test to see if entire goal has been entered

proc complete_goal {msg} {
# remove 0'x strings
  while {[regexp {^(.*)0'(.*)$} $msg d1 d2 d3]} {
    set msg ${d2}$d3
  }
# remove quoted terms
  while {[regexp {^([^']*)'[^']*'(.*)$} $msg d1 d2 d3]} {
    set msg ${d2}$d3
  }
# remove /* */ comments
  while {[regexp -indices -- {(/\*)} $msg d1]} {
    set b [expr [lindex $d1 0] - 1]
    set e [expr [lindex $d1 1] + 1]
    set st [string range $msg 0 $b]
    set en [string range $msg $e end]
    if {[regexp {\*/(.*)$} $en d1 d2 ]} {
      set msg ${st}$d2
    } else {
      return 0
    }
  }         
# remove % EOL comments
  while {[regexp {([^%]*)%(.*)$} $msg d1 d2 d3]} {
    if {[regexp {\n(.*)$} $d3 d4 d5]} {
      set msg ${d2}$d5
      } else {
      return 0
      }
    }
# remove {...} strings 
  while {[regexp {^(.*)\{(.*)$} $msg d1 d2 d3]} {
    if {[regexp {^([^\}]*)\}(.*)$} $d3 d4 d5 d6]} {
      set msg ${d2}$d6
      } else {
      return 0
      }
     }
# does the remaining string contain .WHITESPACE
  if {[string first ". " $msg] != -1 || [string first ".\n" $msg] != -1 || [string first ".\t" $msg] != -1} {
    return 1
  } else {
    return 0
  }
}              


