#line 2 "lexer.cc"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/03/qp/qp6/.repository-6.0/repository/src/lexer.cc,v 1.6 2001/11/21 00:21:15 qp Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 103
#define YY_END_OF_BUFFER 104
static yyconst short int yy_accept[680] =
    {   0,
        0,    0,  104,  102,   87,   87,  102,  102,   90,   98,
       99,  101,   95,  100,   92,   94,   96,   97,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  102,   87,   93,    0,   88,   89,   92,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   76,    0,   91,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       70,    0,    0,    0,    0,    0,    0,   66,   64,    0,
       65,   62,    0,   61,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   71,    0,    0,    0,    0,    0,
        0,    0,   72,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   63,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       53,    0,    0,    0,    0,    0,    0,    0,    0,   25,
        0,    0,    0,    0,    0,    0,    0,   73,    0,    0,
        0,    0,    7,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   51,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   54,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   40,    0,    0,    0,    0,    0,   57,    0,
        0,    0,    0,    0,    0,   24,    0,   74,    0,   21,
        0,   75,    0,   22,    0,    0,    0,    0,    6,    0,

        0,    0,    0,    0,    3,    0,    0,    0,    4,    0,
        0,    0,   50,    0,    0,   43,    0,    0,   44,    0,
        0,    0,    0,    0,    0,   67,    0,    0,   34,    0,
        0,   35,    0,    0,   56,    0,   14,    0,    0,    0,
       23,    0,    0,    0,    0,    0,    0,    5,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   49,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       26,    0,    0,    0,    0,   81,   82,   83,   84,   85,
       86,    0,    0,    8,    0,    0,    0,    0,    0,    0,

        0,   68,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   39,   36,    0,   37,    0,   55,    0,
       60,    0,    0,    0,   19,    0,   20,    0,   13,    0,
        0,    0,    1,    0,    0,    2,    0,    0,   41,    0,
       42,    0,    0,    0,   77,    0,   38,    0,    0,   59,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       52,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   15,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   32,   33,   58,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   30,    0,   31,    0,    0,
       11,    0,    0,   12,    0,    0,   47,    0,   48,    0,
       78,    0,    0,   69,   27,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   79,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   80,   28,   29,    0,    9,
        0,   10,    0,   45,   46,    0,    0,    0,    0,   16,
       17,    0,    0,    0,    0,    0,    0,   18,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        2,    2,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    1,    1,    4,    5,    1,    6,    7,
        8,    9,    1,   10,   11,    1,   12,   13,   14,   15,
       16,   17,   18,   19,   19,   19,   19,   20,    1,    1,
        1,    1,    1,    1,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       22,    1,   23,    1,   24,    1,   25,   26,   27,   28,

       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   42,   43,   44,   45,   46,   47,   48,
       49,   21,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[50] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    2,    2,    2,    2,    2,    2,    2,    1,
        2,    1,    1,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2
    } ;

static yyconst short int yy_base[682] =
    {   0,
        0,    0,  716,  717,   48,   50,    0,  712,  717,  717,
      717,  717,  717,  705,   41,  717,  717,  717,  677,   36,
      683,   24,  686,  681,  684,  663,   34,   22,  678,   37,
      664,  667,   67,    0,  701,  717,  717,   61,  667,  666,
      672,  656,  674,  670,   53,  664,  652,  659,  657,  666,
      653,  652,  661,  645,  644,  643,  653,   38,  652,  645,
      647,  655,  717,  645,  717,  653,  635,  642,  653,  632,
      635,  639,  633,  645,  626,  646,  627,  644,  623,  623,
      641,  634,  636,  638,  626,  624,  614,  717,  717,   58,
      717,  717,  634,  717,  628,  628,   62,  606,   69,  627,

      609,  615,  602,  625,   84,  625,  609,  603,  607,  607,
      611,  599,  618,  617,  613,  610,  599,  598,  598,  602,
      589,   48,  609,  608,  607,  591,  591,  602,  588,  602,
      601,  592,  599,  593,  597,  576,  591,  575,  575,  590,
      588,  585,  575,  568,  568,  568,   80,   84,  564,  580,
      583,  568,   55,  562,  579,  561,  576,   83,   89,  564,
      562,  555,  564,  564,   51,   75,  572,  558,  570,   98,
      564,  564,  564,  561,  556,  563,  563,  543,  556,  540,
      538,  553,  555,  555,  550,  552,  552,  532,  717,  542,
      531,  529,  543,  527,  532,  524,  525,  541,  537,  540,

      538,  534,  537,  532,  517,  530,  529,  529,  530,  530,
      528,  528,  513,  522,  521,  510,  510,  508,  522,  521,
      717,  502,  518,  514,  503,  496,  109,  495,  507,  717,
      510,  490,  501,  100,  488,  499,  101,  717,  494,  487,
      497,  498,  717,  484,  500,  482,  491,  482,  103,  489,
      480,  112,  497,  476,  488,  491,  717,  483,  114,  482,
      115,  477,  490,  477,  474,  467,  477,   58,  113,  480,
      468,  474,  478,  476,  476,  460,  460,  476,  471,  455,
      469,  468,  451,  462,  465,  464,  447,  458,  447,  464,
      463,  458,  453,  441,  451,  454,  445,  436,  447,  450,

      441,  432,  443,  446,  449,  444,  428,  442,  425,  436,
      439,  422,  433,  441,  435,  420,  419,  432,  432,  430,
      433,  428,  431,  412,  425,  426,  423,  717,  423,  423,
      420,  410,  405,  401,  409,  417,  414,  417,  405,  413,
      410,  413,  393,  398,  399,  392,  403,  387,  387,  403,
      405,  399,  402,  399,  401,  395,  398,  386,  383,  378,
      395,  391,  388,  391,  388,  385,  388,  125,  376,  382,
      366,  378,  717,  378,  122,  377,  125,  363,  717,  380,
      362,  361,  377,  373,  356,  717,  357,  717,  354,  717,
      371,  717,  352,  717,  369,  352,  349,  368,  717,  358,

      348,  344,  344,  344,  717,  360,  341,  341,  717,  357,
      339,  337,  717,  334,  335,  717,  352,  333,  717,  350,
      336,  329,  329,  343,  328,  717,  345,  340,  717,  323,
      334,  717,  321,  332,  717,  320,  717,  334,  322,  328,
      717,  331,  335,  322,  333,  320,  157,  717,  326,  325,
      324,  308,  327,  305,  313,  324,  302,  310,  316,  717,
      305,  319,  306,  317,  304,  301,  313,  295,  294,  306,
      296,  291,  303,  306,  301,  304,  299,  284,  297,  298,
      300,  277,  293,  275,  291,  717,  717,  717,  717,  717,
      717,  282,  276,  717,  284,  270,  289,  285,  267,  286,

      282,  717,  277,  263,  279,  261,  277,  262,  266,  258,
      265,  277,  256,  717,  717,  273,  717,  272,  717,  254,
      717,  271,  265,  269,  717,  268,  717,  252,  717,  252,
      265,  246,  717,  263,  244,  717,  258,  260,  717,  259,
      717,  239,  238,  254,  717,  250,  717,  243,  242,  717,
      233,  234,  140,  141,  231,  236,  142,  229,  143,  228,
      717,  144,  145,  246,  237,  225,  243,  238,  237,  236,
      239,  218,  229,  216,  227,  210,  717,  213,  224,  223,
      210,  221,  220,  207,  218,  205,  216,  210,  217,  201,
      212,  717,  717,  717,  207,  214,  217,  212,  215,  215,

      209,  212,  192,  206,  209,  189,  203,  206,  201,  204,
      184,  194,  184,  189,  195,  717,  197,  717,  196,  178,
      717,  194,  174,  717,  192,   26,  717,   86,  717,  106,
      717,  111,  112,  717,  717,  117,  124,  117,  127,  121,
      152,  145,  154,  155,  150,  717,  164,  165,  169,  167,
      164,  169,  166,  171,  172,  717,  717,  717,  159,  717,
      164,  717,  165,  717,  717,  161,  168,  169,  175,  717,
      717,  165,  165,  167,  179,  174,  176,  717,  717,  213,
      215
    } ;

static yyconst short int yy_def[682] =
    {   0,
      679,    1,  679,  679,  679,  679,  680,  681,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  680,  681,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,

      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,

      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,

      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,

      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,

      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,

      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,    0,  679,
      679
    } ;

static yyconst short int yy_nxt[767] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,    4,   12,
       13,   14,   15,   15,   15,   15,   15,   15,   15,   16,
        4,   17,   18,    4,   19,    4,   20,   21,   22,   23,
       24,   25,    4,   26,    4,    4,    4,   27,    4,   28,
        4,   29,   30,   31,   32,    4,    4,    4,    4,   33,
       33,   33,   33,   38,   38,   38,   38,   38,   38,   38,
       40,   44,   50,   52,   53,   56,   54,   41,   33,   33,
      642,   45,   51,   38,   38,   38,   38,   38,   38,   38,
       42,   66,   80,   57,  109,   67,   81,  192,  118,  209,
      110,  156,  157,  111,  119,  126,  210,  120,  193,  320,

      112,  127,  121,  321,  122,  113,  114,  128,  137,  123,
      124,  643,  138,  211,  129,  182,  130,  131,  183,  185,
      212,  198,  186,  139,  216,  184,  199,  201,  200,  187,
      217,  644,  202,  275,  203,  283,  287,  276,  298,  645,
      646,  284,  288,  218,  299,  219,  220,  302,  277,  309,
      312,  421,  647,  303,  322,  310,  313,  430,  323,  648,
      433,  649,  650,  431,  651,  422,  434,  423,  424,  486,
      487,  488,  489,  490,  491,  572,  574,  578,  581,  584,
      586,  573,  575,  579,  582,  585,  587,  652,  653,  654,
      655,  656,  657,  658,  659,  660,  661,  662,  663,  664,

      665,  666,  667,  668,  669,  670,  671,  672,  673,  674,
      675,  676,  677,  678,   34,   35,   35,  641,  640,  639,
      638,  637,  636,  635,  634,  633,  632,  631,  630,  629,
      628,  627,  626,  625,  624,  623,  622,  621,  620,  619,
      618,  617,  616,  615,  614,  613,  612,  611,  610,  609,
      608,  607,  606,  605,  604,  603,  602,  601,  600,  599,
      598,  597,  596,  595,  594,  593,  592,  591,  590,  589,
      588,  583,  580,  577,  576,  571,  570,  569,  568,  567,
      566,  565,  564,  563,  562,  561,  560,  559,  558,  557,
      556,  555,  554,  553,  552,  551,  550,  549,  548,  547,

      546,  545,  544,  543,  542,  541,  540,  539,  538,  537,
      536,  535,  534,  533,  532,  531,  530,  529,  528,  527,
      526,  525,  524,  523,  522,  521,  520,  519,  518,  517,
      516,  515,  514,  513,  512,  511,  510,  509,  508,  507,
      506,  505,  504,  503,  502,  501,  500,  499,  498,  497,
      496,  495,  494,  493,  492,  485,  484,  483,  482,  481,
      480,  479,  478,  477,  476,  475,  474,  473,  472,  471,
      470,  469,  468,  467,  466,  465,  464,  463,  462,  461,
      460,  459,  458,  457,  456,  455,  454,  453,  452,  451,
      450,  449,  448,  447,  446,  445,  444,  443,  442,  441,

      440,  439,  438,  437,  436,  435,  432,  429,  428,  427,
      426,  425,  420,  419,  418,  417,  416,  415,  414,  413,
      412,  411,  410,  409,  408,  407,  406,  405,  404,  403,
      402,  401,  400,  399,  398,  397,  396,  395,  394,  393,
      392,  391,  390,  389,  388,  387,  386,  385,  384,  383,
      382,  381,  380,  379,  378,  377,  376,  375,  374,  373,
      372,  371,  370,  369,  368,  367,  366,  365,  364,  363,
      362,  361,  360,  359,  358,  357,  356,  355,  354,  353,
      352,  351,  350,  349,  348,  347,  346,  345,  344,  343,
      342,  341,  340,  339,  338,  337,  336,  335,  334,  333,

      332,  331,  330,  329,  328,  327,  326,  325,  324,  319,
      318,  317,  316,  315,  314,  311,  308,  307,  306,  305,
      304,  301,  300,  297,  296,  295,  294,  293,  292,  291,
      290,  289,  286,  285,  282,  281,  280,  279,  278,  274,
      273,  272,  271,  270,  269,  268,  267,  266,  265,  264,
      263,  262,  261,  260,  259,  258,  257,  256,  255,  254,
      253,  252,  251,  250,  249,  248,  247,  246,  245,  244,
      243,  242,  241,  240,  239,  238,  237,  236,  235,  234,
      233,  232,  231,  230,  229,  228,  227,  226,  225,  224,
      223,  222,  221,  215,  214,  213,  208,  207,  206,  205,

      204,  197,  196,  195,  194,  191,  190,  189,  188,  181,
      180,  179,  178,  177,  176,  175,  174,  173,  172,  171,
      170,  169,  168,  167,  166,  165,  164,  163,  162,  161,
      160,  159,  158,  155,  154,  153,  152,  151,  150,  149,
      148,  147,  146,  145,  144,  143,  142,  141,  140,  136,
      135,  134,  133,  132,  125,  117,  116,  115,  108,  107,
      106,  105,  104,  103,  102,  101,  100,   99,   98,   97,
       96,   95,   94,   93,   92,   91,   90,   89,   88,   87,
       86,   85,   84,   83,   82,   79,   78,   77,   76,   75,
       74,   73,   72,   71,   70,   69,   68,   65,   64,   63,

       62,   61,   60,   36,   59,   58,   55,   49,   48,   47,
       46,   43,   39,   37,   36,  679,    3,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679
    } ;

static yyconst short int yy_chk[767] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    5,
        5,    6,    6,   15,   15,   15,   15,   15,   15,   15,
       20,   22,   27,   28,   28,   30,   28,   20,   33,   33,
      626,   22,   27,   38,   38,   38,   38,   38,   38,   38,
       20,   45,   58,   30,   90,   45,   58,  153,   97,  165,
       90,  122,  122,   90,   97,   99,  165,   97,  153,  268,

       90,   99,   97,  268,   97,   90,   90,   99,  105,   97,
       97,  628,  105,  166,   99,  147,   99,   99,  147,  148,
      166,  158,  148,  105,  170,  147,  158,  159,  158,  148,
      170,  630,  159,  227,  159,  234,  237,  227,  249,  632,
      633,  234,  237,  170,  249,  170,  170,  252,  227,  259,
      261,  368,  636,  252,  269,  259,  261,  375,  269,  637,
      377,  638,  639,  375,  640,  368,  377,  368,  368,  447,
      447,  447,  447,  447,  447,  553,  554,  557,  559,  562,
      563,  553,  554,  557,  559,  562,  563,  641,  642,  643,
      644,  645,  647,  648,  649,  650,  651,  652,  653,  654,

      655,  659,  661,  663,  666,  667,  668,  669,  672,  673,
      674,  675,  676,  677,  680,  681,  681,  625,  623,  622,
      620,  619,  617,  615,  614,  613,  612,  611,  610,  609,
      608,  607,  606,  605,  604,  603,  602,  601,  600,  599,
      598,  597,  596,  595,  591,  590,  589,  588,  587,  586,
      585,  584,  583,  582,  581,  580,  579,  578,  576,  575,
      574,  573,  572,  571,  570,  569,  568,  567,  566,  565,
      564,  560,  558,  556,  555,  552,  551,  549,  548,  546,
      544,  543,  542,  540,  538,  537,  535,  534,  532,  531,
      530,  528,  526,  524,  523,  522,  520,  518,  516,  513,

      512,  511,  510,  509,  508,  507,  506,  505,  504,  503,
      501,  500,  499,  498,  497,  496,  495,  493,  492,  485,
      484,  483,  482,  481,  480,  479,  478,  477,  476,  475,
      474,  473,  472,  471,  470,  469,  468,  467,  466,  465,
      464,  463,  462,  461,  459,  458,  457,  456,  455,  454,
      453,  452,  451,  450,  449,  446,  445,  444,  443,  442,
      440,  439,  438,  436,  434,  433,  431,  430,  428,  427,
      425,  424,  423,  422,  421,  420,  418,  417,  415,  414,
      412,  411,  410,  408,  407,  406,  404,  403,  402,  401,
      400,  398,  397,  396,  395,  393,  391,  389,  387,  385,

      384,  383,  382,  381,  380,  378,  376,  374,  372,  371,
      370,  369,  367,  366,  365,  364,  363,  362,  361,  360,
      359,  358,  357,  356,  355,  354,  353,  352,  351,  350,
      349,  348,  347,  346,  345,  344,  343,  342,  341,  340,
      339,  338,  337,  336,  335,  334,  333,  332,  331,  330,
      329,  327,  326,  325,  324,  323,  322,  321,  320,  319,
      318,  317,  316,  315,  314,  313,  312,  311,  310,  309,
      308,  307,  306,  305,  304,  303,  302,  301,  300,  299,
      298,  297,  296,  295,  294,  293,  292,  291,  290,  289,
      288,  287,  286,  285,  284,  283,  282,  281,  280,  279,

      278,  277,  276,  275,  274,  273,  272,  271,  270,  267,
      266,  265,  264,  263,  262,  260,  258,  256,  255,  254,
      253,  251,  250,  248,  247,  246,  245,  244,  242,  241,
      240,  239,  236,  235,  233,  232,  231,  229,  228,  226,
      225,  224,  223,  222,  220,  219,  218,  217,  216,  215,
      214,  213,  212,  211,  210,  209,  208,  207,  206,  205,
      204,  203,  202,  201,  200,  199,  198,  197,  196,  195,
      194,  193,  192,  191,  190,  188,  187,  186,  185,  184,
      183,  182,  181,  180,  179,  178,  177,  176,  175,  174,
      173,  172,  171,  169,  168,  167,  164,  163,  162,  161,

      160,  157,  156,  155,  154,  152,  151,  150,  149,  146,
      145,  144,  143,  142,  141,  140,  139,  138,  137,  136,
      135,  134,  133,  132,  131,  130,  129,  128,  127,  126,
      125,  124,  123,  121,  120,  119,  118,  117,  116,  115,
      114,  113,  112,  111,  110,  109,  108,  107,  106,  104,
      103,  102,  101,  100,   98,   96,   95,   93,   87,   86,
       85,   84,   83,   82,   81,   80,   79,   78,   77,   76,
       75,   74,   73,   72,   71,   70,   69,   68,   67,   66,
       64,   62,   61,   60,   59,   57,   56,   55,   54,   53,
       52,   51,   50,   49,   48,   47,   46,   44,   43,   42,

       41,   40,   39,   35,   32,   31,   29,   26,   25,   24,
       23,   21,   19,   14,    8,    3,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "qa.l"
#define INITIAL 0
#line 3 "qa.l"
/*
 * Copyright (C) 1990, 1996
 *
 * Department of Computer Science,
 * University of Queensland
 */

#include <iostream.h>

#include "asm_objects.h"
#include "errors.h"
#include "instructions.h"
#include "string.h"

#define RETURN_INSTR(opcode, token)					\
	do {								\
	  yylval.instruction =						\
            new ASMInt<Code::InstructionSizedType>(opcode);		\
	  if (yylval.instruction == NULL)				\
	    {								\
              OutOfMemory(Program);					\
	    }								\
									\
	  return token;							\
	} while (0)

void read_comment(void);

size_t read_atom(char *, const size_t);

#line 789 "lexer.cc"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp = NULL, *yy_bp = NULL;
	register int yy_act;

#line 34 "qa.l"

#line 942 "lexer.cc"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 680 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 717 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 35 "qa.l"
RETURN_INSTR(PUT_X_VARIABLE, put_x_variable);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 36 "qa.l"
RETURN_INSTR(PUT_Y_VARIABLE, put_y_variable);
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 37 "qa.l"
RETURN_INSTR(PUT_X_VALUE, put_x_value);
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 38 "qa.l"
RETURN_INSTR(PUT_Y_VALUE, put_y_value);
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 39 "qa.l"
RETURN_INSTR(PUT_CONSTANT, put_constant);
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 40 "qa.l"
RETURN_INSTR(PUT_INTEGER, put_integer);
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 41 "qa.l"
RETURN_INSTR(PUT_LIST, put_list); 
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 42 "qa.l"
RETURN_INSTR(PUT_STRUCTURE, put_structure);
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 43 "qa.l"
RETURN_INSTR(PUT_X_OBJECT_VARIABLE, put_x_object_variable);
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 44 "qa.l"
RETURN_INSTR(PUT_Y_OBJECT_VARIABLE, put_y_object_variable);
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 45 "qa.l"
RETURN_INSTR(PUT_X_OBJECT_VALUE, put_x_object_value);
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 46 "qa.l"
RETURN_INSTR(PUT_Y_OBJECT_VALUE, put_y_object_value);
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 47 "qa.l"
RETURN_INSTR(PUT_QUANTIFIER, put_quantifier);
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 48 "qa.l"
RETURN_INSTR(CHECK_BINDER, check_binder);
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 49 "qa.l"
RETURN_INSTR(PUT_SUBSTITUTION, put_substitution);
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 50 "qa.l"
RETURN_INSTR(PUT_X_TERM_SUBSTITUTION, put_x_term_substitution);
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 51 "qa.l"
RETURN_INSTR(PUT_Y_TERM_SUBSTITUTION, put_y_term_substitution);
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 52 "qa.l"
RETURN_INSTR(PUT_INITIAL_EMPTY_SUBSTITUTION, put_initial_empty_substitution);
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 53 "qa.l"
RETURN_INSTR(GET_X_VARIABLE, get_x_variable);
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 54 "qa.l"
RETURN_INSTR(GET_Y_VARIABLE, get_y_variable);
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 55 "qa.l"
RETURN_INSTR(GET_X_VALUE, get_x_value);
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 56 "qa.l"
RETURN_INSTR(GET_Y_VALUE, get_y_value);
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 57 "qa.l"
RETURN_INSTR(GET_CONSTANT, get_constant);
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 58 "qa.l"
RETURN_INSTR(GET_INTEGER, get_integer);
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 59 "qa.l"
RETURN_INSTR(GET_LIST, get_list);
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 60 "qa.l"
RETURN_INSTR(GET_STRUCTURE, get_structure);
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 61 "qa.l"
RETURN_INSTR(GET_STRUCTURE_FRAME, get_structure_frame);
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 62 "qa.l"
RETURN_INSTR(GET_X_OBJECT_VARIABLE, get_x_object_variable);
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 63 "qa.l"
RETURN_INSTR(GET_Y_OBJECT_VARIABLE, get_y_object_variable);
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 64 "qa.l"
RETURN_INSTR(GET_X_OBJECT_VALUE, get_x_object_value);
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 65 "qa.l"
RETURN_INSTR(GET_Y_OBJECT_VALUE, get_y_object_value);
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 66 "qa.l"
RETURN_INSTR(UNIFY_X_VARIABLE, unify_x_variable);
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 67 "qa.l"
RETURN_INSTR(UNIFY_Y_VARIABLE, unify_y_variable);
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 68 "qa.l"
RETURN_INSTR(UNIFY_X_REF, unify_x_ref);
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 69 "qa.l"
RETURN_INSTR(UNIFY_Y_REF, unify_y_ref);
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 70 "qa.l"
RETURN_INSTR(UNIFY_X_VALUE, unify_x_value);	
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 71 "qa.l"
RETURN_INSTR(UNIFY_Y_VALUE, unify_y_value);
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 72 "qa.l"
RETURN_INSTR(UNIFY_CONSTANT, unify_constant);		
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 73 "qa.l"
RETURN_INSTR(UNIFY_INTEGER, unify_integer);		
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 74 "qa.l"
RETURN_INSTR(UNIFY_VOID, unify_void);
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 75 "qa.l"
RETURN_INSTR(SET_X_VARIABLE, set_x_variable);
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 76 "qa.l"
RETURN_INSTR(SET_Y_VARIABLE, set_y_variable);
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 77 "qa.l"
RETURN_INSTR(SET_X_VALUE, set_x_value);
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 78 "qa.l"
RETURN_INSTR(SET_Y_VALUE, set_y_value);
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 79 "qa.l"
RETURN_INSTR(SET_X_OBJECT_VARIABLE, set_x_object_variable);
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 80 "qa.l"
RETURN_INSTR(SET_Y_OBJECT_VARIABLE, set_y_object_variable);
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 81 "qa.l"
RETURN_INSTR(SET_X_OBJECT_VALUE, set_x_object_value);
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 82 "qa.l"
RETURN_INSTR(SET_Y_OBJECT_VALUE, set_y_object_value);
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 83 "qa.l"
RETURN_INSTR(SET_CONSTANT, set_constant);
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 84 "qa.l"
RETURN_INSTR(SET_INTEGER, set_integer);
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 85 "qa.l"
RETURN_INSTR(SET_VOID, set_void);
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 86 "qa.l"
RETURN_INSTR(SET_OBJECT_VOID, set_object_void);
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 87 "qa.l"
RETURN_INSTR(ALLOCATE, wam_allocate);
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 88 "qa.l"
RETURN_INSTR(DEALLOCATE, wam_deallocate);
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 89 "qa.l"
RETURN_INSTR(CALL_PREDICATE, call_predicate);
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 90 "qa.l"
RETURN_INSTR(CALL_ADDRESS, call_address);
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 91 "qa.l"
RETURN_INSTR(CALL_ESCAPE, call_escape);
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 92 "qa.l"
RETURN_INSTR(EXECUTE_PREDICATE, execute_predicate);
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 93 "qa.l"
RETURN_INSTR(EXECUTE_ADDRESS, execute_address);
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 94 "qa.l"
RETURN_INSTR(EXECUTE_ESCAPE, execute_escape);
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 95 "qa.l"
RETURN_INSTR(NOOP, noop);
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 96 "qa.l"
RETURN_INSTR(JUMP, jump);
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 97 "qa.l"
RETURN_INSTR(PROCEED, proceed);
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 98 "qa.l"
RETURN_INSTR(FAIL, wam_fail);
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 99 "qa.l"
RETURN_INSTR(HALT, halt);
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 100 "qa.l"
RETURN_INSTR(EXIT, wam_exit);
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 101 "qa.l"
RETURN_INSTR(TRY_ME_ELSE, try_me_else);
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 102 "qa.l"
RETURN_INSTR(RETRY_ME_ELSE, retry_me_else);
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 103 "qa.l"
RETURN_INSTR(TRUST_ME_ELSE_FAIL, trust_me_else_fail);
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 104 "qa.l"
RETURN_INSTR(TRY, wam_try);
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 105 "qa.l"
RETURN_INSTR(RETRY, retry);
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 106 "qa.l"
RETURN_INSTR(TRUST, trust);
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 107 "qa.l"
RETURN_INSTR(NECK_CUT, neck_cut);
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 108 "qa.l"
RETURN_INSTR(GET_X_LEVEL, get_x_level);
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 109 "qa.l"
RETURN_INSTR(GET_Y_LEVEL, get_y_level);
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 110 "qa.l"
RETURN_INSTR(CUT, cut);
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 111 "qa.l"
RETURN_INSTR(SWITCH_ON_TERM, switch_on_term);
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 112 "qa.l"
RETURN_INSTR(SWITCH_ON_CONSTANT, switch_on_constant);
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 113 "qa.l"
RETURN_INSTR(SWITCH_ON_STRUCTURE, switch_on_structure);
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 114 "qa.l"
RETURN_INSTR(SWITCH_ON_QUANTIFIER, switch_on_quantifier);
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 115 "qa.l"
RETURN_INSTR(PSEUDO_INSTR0, pseudo_instr0);	
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 116 "qa.l"
RETURN_INSTR(PSEUDO_INSTR1, pseudo_instr1);	
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 117 "qa.l"
RETURN_INSTR(PSEUDO_INSTR2, pseudo_instr2);	
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 118 "qa.l"
RETURN_INSTR(PSEUDO_INSTR3, pseudo_instr3);	
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 119 "qa.l"
RETURN_INSTR(PSEUDO_INSTR4, pseudo_instr4);	
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 120 "qa.l"
RETURN_INSTR(PSEUDO_INSTR5, pseudo_instr5);
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 122 "qa.l"
/* Skip whitespace */
	YY_BREAK
case 88:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 124 "qa.l"
/* Comment: Skip till \n */
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 126 "qa.l"
read_comment();
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 128 "qa.l"
{
				static char buf[ATOM_LENGTH];

				const int len = read_atom(buf, ATOM_LENGTH);
				if (len == -1)
				{
				  Fatal(__FUNCTION__, "bad atom");
				}
				yylval.atom_name = new String(buf);
				if (yylval.atom_name == NULL)
				  {
                                    OutOfMemory(Program);
				  }

				return ATOM_TOKEN;
			}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 145 "qa.l"
{
				/* End of predicate tag */
				return END_TOKEN;
			}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 150 "qa.l"
{
				yylval.number_value = atoi(yytext);
				return NUMBER_TOKEN;
			}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 155 "qa.l"
{
  				yylval.label_name = new String(yytext);

				if (yylval.label_name == NULL)
				  {
                                    OutOfMemory(Program);
				  }

				return LABEL_TOKEN;
			}
	YY_BREAK
case 94:
#line 167 "qa.l"
case 95:
#line 168 "qa.l"
case 96:
#line 169 "qa.l"
case 97:
#line 170 "qa.l"
case 98:
#line 171 "qa.l"
case 99:
#line 172 "qa.l"
case 100:
#line 173 "qa.l"
case 101:
YY_RULE_SETUP
#line 173 "qa.l"
{
				/* Punctuation */
				return yytext[0];
			}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 178 "qa.l"
{
				/* Unrecognised character */
				fprintf(stderr,
					"Bad character in input %c\n",
					yytext[0]);
			}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 185 "qa.l"
ECHO;
	YY_BREAK
#line 1560 "lexer.cc"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 680 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 680 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 679);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 185 "qa.l"


void read_comment(void)
{
  int c, d;

  c = yyinput();
  
  if (c == EOF)
    {
      Fatal(Program, "unexpected EOF in comment");
    }
  
  d = yyinput();
  
  if (d == EOF)
    {
      Fatal(Program, "unexpected EOF in comment");
    }
  
  while (!(c == '*' && d == '/'))
    {
      c = d;
      
      d = yyinput();
      
      if (d == EOF)
	{
	  Fatal(Program, "unexpected EOF in comment");
	}
    }
}

size_t read_atom(char *buf, const size_t len)
{
  unsigned i = 0;
  bool done = false;

  int c = yyinput();

  while(!done && i < len - 1)
    {
      if(c == '\'')
	{
	  c = yyinput();
	  done = (c != '\'');
	}

      if(!done)
	if(c == '\n') 
	  {
	    buf[i++] = '\n';
	    c = yyinput();
	  }
	else if (c == '\t')
	  {
	    buf[i++] = '\t';
	    c = yyinput();
	  }
	else if (c == '\\')
	  {
	    c = yyinput();
	    switch (c)
	      {
	      case 'a':
		buf[i++] = '\a';
		c = yyinput();
		break;
	      case 'b':
		buf[i++] = '\b';
		c = yyinput();
		break;
	      case 'f':
		buf[i++] = '\f';
		c = yyinput();
		break;
	      case 'n':
		buf[i++] = '\n';
		c = yyinput();
		break;
	      case 'r':
		buf[i++] = '\r';
		c = yyinput();
		break;
	      case 't':
		buf[i++] = '\t';
		c = yyinput();
		break;
	      case 'v':
		buf[i++] = '\v';
		c = yyinput();
		break;
	      case '\\':
		buf[i++] = '\\';
		c = yyinput();
		break;
	      case '\'':
		buf[i++] = '\'';
		c = yyinput();
		break;
	      case '\"':
		buf[i++] = '\"';
		c = yyinput();
		break;
	      default:
		buf[i++] = '\\';
		break;
	      }
	  }
	else			
	  {
	    buf[i++] = c;
	    c = yyinput();
	  }
    }
  
  unput(c);

  if(i > len - 1) 
    {
      Fatal(Program, "atom too long (>%d chars) %s\n", i, buf);
    }

  buf[i] = '\0';

  return i;
}
